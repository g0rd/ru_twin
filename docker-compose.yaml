services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ru_twin_app
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./data:/app/data
    depends_on:
      - phoenix
      - redis
      - postgres
      - chroma
      - minio
    environment:
      - PYTHONPATH=/app
      - OTEL_SERVICE_NAME=ru_twin
      - OTEL_EXPORTER_OTLP_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_HEADERS=api_key=${PHOENIX_API_KEY}
      - PHOENIX_CLIENT_ENDPOINT=https://app.phoenix.arize.com
      - PHOENIX_CLIENT_HEADERS=api_key=${PHOENIX_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ru_twin
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    networks:
      - ru_twin_network
    command: python src/ru_twin/main.py --server --host 0.0.0.0 --port 8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"

  phoenix:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ru_twin_phoenix
    ports:
      - "6006:6006"
      - "4317:4317"
    volumes:
      - phoenix_data:/phoenix/data
    environment:
      - PHOENIX_API_KEY=${PHOENIX_API_KEY}
    networks:
      - ru_twin_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  redis:
    image: redis:7.0-alpine
    container_name: ru_twin_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ru_twin_network
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: ru_twin_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=ru_twin
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - ru_twin_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: ru_twin_chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - ru_twin_network
    restart: unless-stopped
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma

  minio:
    image: minio/minio:latest
    container_name: ru_twin_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    networks:
      - ru_twin_network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: ru_twin_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ru_twin_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  phoenix_data:
  redis_data:
  postgres_data:
  chroma_data:
  minio_data:
  ollama_data:

networks:
  ru_twin_network:
    driver: bridge
version: '3'